apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx-app
  template:
    metadata:
      labels:
        app: nginx-app
    spec:
      containers:
      - name: nginx-app
        image: nginx:latest
        volumeMounts:
        - name: nginx-config-volume
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: html-content
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
        ports:
        - containerPort: 80
      volumes:
      - name: nginx-config-volume
        configMap:
          name: nginx-config  # ConfigMap defined in this YAML
      - name: html-content
        configMap:
          name: html-content  # ConfigMap defined in this YAML
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |
    server {
        listen 80;

        # Serve the custom index.html
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }

        # Proxy API requests to the Flask backend
        location /api/ {
            proxy_pass http://flask-service:5000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: html-content
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>User Preferences</title>
    </head>
    <body>
        <h1>User Preferences</h1>
        <table id="users-table" border="1">
            <thead>
                <tr>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Preferences</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
        <script>
            fetch('/api/users')
                .then(response => response.json())
                .then(data => {
                    const tableBody = document.getElementById('users-table').getElementsByTagName('tbody')[0];
                    data.forEach(user => {
                        const row = document.createElement('tr');
                        row.innerHTML = `<td>${user.username}</td><td>${user.email}</td><td>${user.preferences}</td>`;
                        tableBody.appendChild(row);
                    });
                })
                .catch(error => console.error('Error fetching user data:', error));
        </script>
    </body>
    </html>
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  type: NodePort  # or LoadBalancer depending on your setup
  selector:
    app: nginx-app
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
    nodePort: 30080  # This should be an available port in Minikube
